// backend/routes/communeRoutes.js
const express = require('express');
const router = express.Router();
const Commune = require('../models/Commune');
const auth = require('../middleware/authMiddleware');
const requireRole = require('../middleware/requireRole');

// utils
const escapeRegExp = (s) => String(s || '').replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
const stripAccents = (s = '') =>
  String(s).normalize('NFD').replace(/[\u0300-\u036f]/g, '');
const slugify = (s = '') =>
  stripAccents(String(s))
    .toLowerCase()
    .replace(/[^a-z0-9]+/g, '-')
    .replace(/^-+|-+$/g, '')
    .replace(/--+/g, '-');

/**
 * IMPORTANT
 *  - On NE met PAS "/api" dans les chemins ci-dessous.
 *  - Le préfixe "/api" est ajouté dans server.js via app.use('/api/communes', router)
 *  - Donc:
 *      GET  /api/communes           -> liste publique (app mobile)
 *      GET  /api/communes/admin     -> liste complète (panel superadmin)
 *      POST /api/communes           -> créer une commune (superadmin)
 */

// ========== PUBLIC: liste des communes (utilisé par l’app mobile) ==========
router.get('/', async (req, res) => {
  try {
    const { q = '' } = req.query;

    // publiques: actives (ou sans champ active)
    const find = { $or: [{ active: { $exists: false } }, { active: { $ne: false } }] };

    if (q) {
      const rx = new RegExp(escapeRegExp(String(q)), 'i');
      find.$or = [
        ...find.$or,
        { name: rx },
        { label: rx },
        { communeName: rx },
        { slug: rx },
        { code: rx },
        { region: rx },
      ];
    }

    const items = await Commune.find(find)
      .select({
        name: 1,
        label: 1,
        communeName: 1,
        code: 1,
        region: 1,
        imageUrl: 1,
        slug: 1,
        active: 1,
      })
      .sort({ name: 1 })
      .lean();

    res.setHeader('Cache-Control', 'no-store, max-age=0');
    return res.json(items);
  } catch (e) {
    console.error('❌ GET /communes', e);
    return res.status(500).json({ message: 'Erreur serveur' });
  }
});

// ========== ADMIN (superadmin): liste complète (panel) ==========
router.get('/admin', auth, requireRole('superadmin'), async (req, res) => {
  try {
    const items = await Commune.find().sort({ name: 1 }).lean();
    res.setHeader('Cache-Control', 'no-store');
    return res.json({ items, total: items.length });
  } catch (e) {
    console.error('❌ GET /communes/admin', e);
    return res.status(500).json({ message: 'Erreur serveur' });
  }
});

// ========== ADMIN (superadmin): création d’une commune ==========
router.post('/', auth, requireRole('superadmin'), async (req, res) => {
  try {
    const {
      name = '',
      slug = '',
      code = '',
      region = '',
      imageUrl = '',
      active = true,
    } = req.body || {};

    const base = (slug || name || '').trim();
    if (!base) return res.status(400).json({ message: 'Nom ou slug requis' });

    const baseSlug = slugify(base) || `commune-${Date.now()}`;
    let finalSlug = baseSlug;
    let i = 1;

    // éviter les doublons de slug
    while (await Commune.findOne({ slug: finalSlug }).lean()) {
      i += 1;
      finalSlug = `${baseSlug}-${i}`;
    }

    const payload = {
      name: name || base,
      label: name || base,
      communeName: name || base,
      code,
      region,
      imageUrl,
      slug: finalSlug,
      active: !!active,
    };

    const doc = await Commune.create(payload);

    res.setHeader('Cache-Control', 'no-store');
    return res.status(201).json(doc);
  } catch (e) {
    console.error('❌ POST /communes', e);
    return res.status(500).json({ message: 'Erreur serveur' });
  }
});

module.exports = router;
